#!/usr/bin/python
import sys
import os
import shutil
import subprocess

#get args
args = sys.argv
#commands

installPath = '/usr/local/guiltyspark/'

def status():
    cmd = ['ps', '-ef']

    process = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    output, error = process.communicate()
    output = str(output)

    isRunning = False 
    if 'guiltysparkdaemon' in output:
        isRunning = True

    if isRunning:
        print('guiltyspark daemon is running!')
    else:
        print('guiltyspark daemon is NOT running!')

    #get uptime
    #can i create a var in monitor parent class that holds start time? if starttime blank set starttime. will they all have instanced parent classes?

    #get monitors running, ehh check installation path
    base = os.path.expanduser('~') + '/.guiltyspark/'
    monitorlen = len(os.listdir(installPath + 'modules/'))
    print(str(monitorlen) + ' monitors found.')

    #data storage loc
    print('Data is being stored to: ' + base)

def getMonitors():
    print('Monitors found:')
    for item in os.listdir(installPath + 'modules/'):
        if item == '__pycache__':
            continue
        print('\t- ' + str(item))

def register(filename, filepath): 
    if '.py' not in filename:
        filename = filename + '.py'
    try:
        shutil.copyfile(filepath, installPath+'modules/'+filename)
    except IOError:
        print('Couldnt write the file here')
    except FileNotFoundError:
        print('Couldnt find file to register. Please use full path')

def unregister(file):
    if '.py' not in file:
        file = file + '.py'
    try:
        os.remove(installPath+'modules/' + file)
    except:
        print('Couldnt unregister file:' + file)

def start():
    subprocess.Popen(['python', installPath+'guiltyspark_daemon.py'], stdout=subprocess.PIPE)
    print('started guiltyspark!')

def stop():
    process = subprocess.Popen(['pidof', 'python', installPath+'guiltyspark_daemon.py'], stdout=subprocess.PIPE)
    output, error = process.communicate()
    output = str(output)
    pid = output.strip('b')
    pid = pid.strip("'")
    pid = pid.strip('\\n')
    pid = pid.split(' ')[1]

    subprocess.Popen(['kill', '-9', pid])
    print('stopped guiltyspark!')

def restart():
    import time
    print('stopping guiltyspark')
    stop()
    time.sleep(3)
    print('starting guiltyspark')
    start()

def clear():
    base = os.path.expanduser('~') + '/.guiltyspark/'
    for item in os.listdir(base):
        try:
            os.remove(base+item)
            print('cleared ' + str(item))
        except:
            print('Trouble while clearing old data')
    print('finished cleanup!')

def export():
    raise NotImplementedError()

def view(monitor_name):
    subprocess.Popen(['python', installPath+'viewer.py', monitor_name])

def main():
    #status
    #-- returns if daemon is running, and some stats, (monitors running, uptime, data storage location)
    if args[1] == 'status':
        status()


    #list
    #-- returns all monitors running
    if args[1] == 'list':
        getMonitors()

    #register
    #-- adds a file to modules/
    if args[1] == 'register' and len(args) > 3:
        register(args[2], args[3])
    #unregister
    #-- removes a file from modules/
    if args[1] == 'unregister' and len(args) > 2:
        unregister(args[2])
    #start

    if args[1] == 'start':
        start()
    #stop
    if args[1] == 'stop':
        stop()
    #restart
    if args[1] == 'restart':
        restart()

    #clear
    if args[1] == 'clear':
        clear()

    #backup/export
    if args[1] == 'backup' or args[1] == 'export':
        export()

    if args[1] == 'view' and len(args) > 2:
        view(args[2])

main()
